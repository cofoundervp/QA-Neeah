*** Settings ***
Library           ExtendedSelenium2Library
Resource          ../Variables/global_variables.txt
Library           String
Library           string
Resource          ../Interfaces/signup_page.txt
Resource          ../Interfaces/Homepage.txt
Resource          ../Interfaces/entrance_page.txt
Resource          ../Interfaces/login_page.txt
Resource          ../Interfaces/web_journal_page.txt
Resource          ../Interfaces/settings_page.txt

*** Keywords ***
open cofiddle
    launch browser    http://${environment}.neeah.cvp.io/    ${gb_browser}
    Maximize Browser Window

increase flag value
    [Arguments]    ${value}
    ${temp}    Evaluate    ${value}+1
    ${value}    Set Variable    ${temp}
    Set Global Variable    ${value}

generate text
    [Arguments]    ${length}
    ${text}    Generate Random String    ${length}    [LETTERS]
    [Return]    ${text}

generate email
    [Arguments]    ${length}
    ${text}    Generate Random String    ${length}    [LETTERS]
    ${email_domain}    Set Variable    @gmail.com
    ${email id1}    Catenate    SEPARATOR=    ${gb_gg_email id}    +
    ${email id}    Catenate    SEPARATOR=    ${email id1}    ${text}
    ${email}    Catenate    SEPARATOR=    ${email id}    ${email_domain}
    [Return]    ${email}

open cofiddle with extensions
    launch chrome with extension
    Go to    http://${environment}.neeah.cvp.io/
    Maximize Browser Window

create account with email
    [Documentation]    This keyword is to create an Cofiddle account with random information
    # open Entrance page
    Click Element    ${homepage_signup button}
    Wait Until Element Is Visible    ${entrance_sign up with email button}
    # open Sign Up form
    Click Element    ${entrance_sign up with email button}
    # input valid value to all fields
    ${kw_first name}    generate text    5
    ${gb_first name}    Set Variable    ${kw_first name}
    Set Suite Variable    ${gb_first name}    # send first name value to global variable
    Input Text    ${su_name}    ${kw_first name}
    ${kw_last name}    generate text    5
    ${gb_last name}    Set Variable    ${kw_last name}
    Set Suite Variable    ${gb_last name}    # send last name value to global variable
    Input Text    ${su_lastname}    ${kw_last name}
    ${kw_email}    generate email    30
    ${gb_email}    Set Variable    ${kw_email}
    Set Suite Variable    ${gb_email}    # send email value to global variable
    Input Text    ${su_email}    ${kw_email}
    Input Text    ${su_password}    Abc123
    Input Text    ${su_confirmpassword}    Abc123
    # click sign up button
    Click Element    ${su_sign up button}

login to gmail
    Input Text    //input[@id="Email"]    cofiddle.qa@gmail.com
    Click Element    //input[@id="next"]
    Input Text    //input[@id="Passwd"]    Cofiddle*123
    Click Element    //input[@id="signIn"]

login
    [Arguments]    ${arg_username}    ${arg_password}
    Input Text    ${si_email field}    ${arg_username}
    Input Text    ${si_password field}    ${arg_password}
    Click Element    ${si_login button}

launch chrome with extension
    ${options}    Evaluate    sys.modules['selenium.webdriver'].ChromeOptions()    sys, selenium.webdriver.chrome.options
    Call Method    ${options}    add_argument    load-extension\=${extension build path}
    Create Webdriver    Chrome    chrome_options=${options}

logout
    Click Element    ${wj_down arrow icon}
    Click Element    ${wj_sign out button}

open mailinator inbox
    [Arguments]    ${arg_email}
    launch browser    https://www.mailinator.com/    ${gb_browser}
    # input email to email field of mailinator
    Input Text    //input[@id="inboxfield"]    ${arg_email}
    # click Go button on mailinator
    Click Button    //button[@class="btn btn-dark" and contains(text(),'Go!')]
    sleep    5s

close all new FTUE popup
    Wait Until Element Is Visible    ${wj_close popup icon}
    Click Element    ${wj_close popup icon}
    Click Element    ${wj_close popup icon}
    Click Element    ${wj_close popup icon}
    Click Element    ${wj_close popup icon}

open settings page
    Wait Until Element Is Visible    ${wj_down arrow icon}
    Click Element    ${wj_down arrow icon}
    Click Element    ${wj_settings button}
    sleep    3s

go to setting's sub-page
    [Arguments]    ${page name}    # Web Journal, Profile, Security, Notifications, Tags
    [Documentation]    Page name = Web Journal, Profile, Security, Notifications, Tags
    Run Keyword If    "${page name}" == "Web Journal"    Click Element    ${setting_left panel_web journal}
    Run Keyword If    "${page name}" == "Profile"    Click Element    ${setting_left panel_profile}
    Run Keyword If    "${page name}" == "Security"    Click Element    ${setting_left panel_security}
    Run Keyword If    "${page name}" == "Notifications"    Click Element    ${setting_left panel_notifications}
    Run Keyword If    "${page name}" == "Tags"    Click Element    ${setting_left panel_tags}
    sleep    5s

go to mailinator inbox in current browser
    [Arguments]    ${arg_email}
    Go To    https://www.mailinator.com/
    # input email to email field of mailinator
    Input Text    //input[@id="inboxfield"]    ${arg_email}
    # click Go button on mailinator
    Click Button    //button[@class="btn btn-dark" and contains(text(),'Go!')]
    sleep    5s

get domain from url
    [Arguments]    ${arg_url}
    [Documentation]    Return the domain of the URL
    # get the string that ignore http: or https:
    ${kw_cut string 1}    String.Fetch From Right    ${arg_url}    :
    # get the string that ignore //
    Comment    ${kw_cut string 2}    Get Substring    ${kw_cut string 1}    2
    Comment    # get domain
    Comment    ${domain}    Fetch From Left    ${kw_cut string 2}    /
    ${domain}    Get Substring    ${kw_cut string 1}    2
    [Return]    ${domain}

get short domain from url
    [Arguments]    ${arg_url}
    # get the string that ignore http: or https:
    ${kw_cut string 1}    String.Fetch From Right    ${arg_url}    :
    # get the string that ignore //
    ${kw_cut string 2}    Get Substring    ${kw_cut string 1}    2
    # get domain
    ${domain}    Fetch From Left    ${kw_cut string 2}    /
    [Return]    ${domain}

write message
    [Arguments]    ${message}
    Log    ${message}    \    \    True

add and create a new tag
    [Arguments]    ${arg_tagname}
    Input Text    ${setting_tags_new tag text field}    ${arg_tagname}
    Press Key    ${setting_tags_new tag text field}    \\13

visit sample page
    Go To    ${gb_sample url}
    sleep    5s

go to coffidle
    Go To    http://${environment}.neeah.cvp.io/
    sleep    5s

enable auto web journal and auto cache
    # enable auto web journal
    Click Element    ${setting_web journal_switch auto web journal}
    # enable auto cache
    Click Element    ${setting_web journal_switch auto cache}
    # save setting
    Click Element    ${setting_save setting_button}

input and submit a random tag to the first item
    # generate a tag name
    ${gb_sample tag name}    generate text    5
    Set Global Variable    ${gb_sample tag name}
    # input tag to text field
    ${wj_note and tag field}    return true locator for text area of the first item
    Click Element    ${wj_note and tag field}
    Input Text    ${wj_note and tag field}    \#${gb_sample tag name}
    Press Key    ${wj_note and tag field}    \\13
    sleep    5s
    Set Global Variable    ${wj_note and tag field}

go to webjournal-history from settings page
    Click Element    //div[@id="menu"]//div[@class="ui three column grid"]//div[@class="three wide column neeah-logo"]//a[@href="history"]
    sleep    2s

return true locator for text area of the first item
    ${gb_textfield_id}    Get Element Attribute    //textarea@id
    ${arg_wj_note and tag field}    Replace String    ${wj_note and tag field}    true_id    ${gb_textfield_id}
    [Return]    ${arg_wj_note and tag field}

launch browser
    [Arguments]    ${url}    ${browser name}
    ${exclude_switches}    Create List    test-type
    ${chrome_args}    Create List    disable-infobars
    ${chrome_options}    Create Dictionary    excludeSwitches=${exclude_switches}    args=${chrome_args}
    ${capabilities}    Create Dictionary    chromeOptions=${chrome_options}
    Create Webdriver    ${browser name}    desired_capabilities=${capabilities}
    Go To    ${url}
